# This workflow automatically bumps the version of SNPio based on GitVersion,
# commits changes to the version files, and creates a GitHub release with the new version tag.
name: Auto Version and Tag SNPio Release

on:
  workflow_dispatch:
    inputs:
      manual_tag:
        description: 'Manually specify a version tag (e.g., 1.5.3). Leave blank to auto-generate.'
        required: false
        default: ''
  push:
    branches:
      - master
      - main
    paths:
      - 'pyproject.toml'
      - 'recipe/meta.yaml'
      - 'snpio/**'
      - 'tests/**'
  pull_request:
    branches:
      - master
      - main
    paths:
      - 'pyproject.toml'
      - 'recipe/meta.yaml'
      - 'snpio/**'
      - 'tests/**'

jobs:
  version-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Exit if workflow triggered by a version tag (prevent recursion)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "🛑 Detected tag push (${GITHUB_REF}). Skipping version bump to prevent recursion."
          exit 0

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
          versionSpec: '5.12.0'

      - name: Run GitVersion
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.11.0

      - name: Determine version to use
        id: set_version
        run: |
          if [ -z "${{ github.event.inputs.manual_tag }}" ]; then
            VERSION="${{ steps.gitversion.outputs.semVer }}"
          else
            VERSION="${{ github.event.inputs.manual_tag }}"
          fi
          echo "Using version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"


      - name: Print version
        run: |
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "SemVer:     ${{ steps.set_version.outputs.version }}"
          echo "Tag:        v${{ steps.set_version.outputs.version }}"

      - name: Install version update dependencies
        run: pip install tomli-w pyyaml

      - name: Update version in pyproject.toml, meta.yaml, conf.py
        run: python scripts/update_versions.py ${{ steps.set_version.outputs.version }}

      - name: Push commit and tag using PAT
        if: github.event_name != 'pull_request'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}
      
          git add pyproject.toml recipe/meta.yaml snpio/docs/source/conf.py
          git commit -m "chore: bump version to ${{ steps.set_version.outputs.version }}" || echo "No changes to commit"

          if git rev-parse "v${{ steps.set_version.outputs.version }}" >/dev/null 2>&1; then
            echo "❌ Tag v${{ steps.set_version.outputs.version }} already exists. Aborting to prevent recursive tagging."
            exit 0
          fi
      
          git push origin HEAD
          git tag "v${{ steps.set_version.outputs.version }}"
          git push origin "v${{ steps.set_version.outputs.version }}"
          echo "v${{ steps.set_version.outputs.version }}" > .version_tag

      - name: Set tag name output
        id: read_tag
        run: echo "tag_name=$(cat .version_tag)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.read_tag.outputs.tag_name }}
          name: Release ${{ steps.read_tag.outputs.tag_name }}
          body: |
            Auto-generated release from GitVersion
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
